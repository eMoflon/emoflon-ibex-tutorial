import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/AdministrationExample/model/AdministrationExample.ecore"

pattern administrationRules() {
	object: EObject
}

rule administration() {
	++administration: Administration
}
when oneAdministration

condition oneAdministration = forbid findAdministration


rule staff(time1:Daytime, time2:Daytime) {
	person: Staff {
		++ -shiftPlan -> shiftPlan
		
		++ -treatment -> treatment
		
		
	}

	++shiftPlan: Shiftplan {
		++ -shifts -> shift
		++ -shifts -> shift2
	}

	++ shift: Shift {
		.time:=param::time1
	}
	++ shift2: Shift {
		.time:=param::time2
	}
	treatment:Treatment{
		
	}
	#count(findTreatment)<3
	
}

rule patient() {
	person: Patient {
		++-treatment -> t
	}
	t:Treatment{
		
	}

	
}



rule patientCovered() {
	patient: Patient {
		++ -coveredBy -> shiftPlan
		++ -coveredBy -> shiftPlan2
		-treatment->t
	}

	shiftPlan: Shiftplan {
		-shifts -> earlyshift
		
		-shifts -> nightshift
	}
	shiftPlan2: Shiftplan {
		-shifts -> lateshift
		
	}

	earlyshift: Shift {
		
	}

	lateshift: Shift {
		
	}

	nightshift: Shift {
		
	}

	
	s: Staff {
		-treatment -> t
		-shiftPlan->shiftPlan
	}
	s1:Staff{
		-treatment -> t
		-shiftPlan->shiftPlan2
	}
	t: Treatment {
		
	}
} when patientAlreadyCovered
condition patientAlreadyCovered = forbid findCoveredPatient

abstract rule shift() {
	++shift: Shift {
		
	}
}

rule earlyshift()
refines shift {
	++earlyshift: Shift {
		.time:=enum::early
	}
}

rule lateshift()
refines shift {
	++lateshift: Shift {
		.time:=enum::late
	}
}

rule nightshift()
refines shift {
	++nightshift: Shift {
		.time:=enum::night
	}
}

pattern findAdministration() {
	administration: Administration
}


pattern findPatient() {
	patient: Patient
}

pattern findShiftplan() {
	shiftlpan: Shiftplan
}

pattern findEarlyShift() {
	earlyshift: Shift
}

pattern findLateShift() {
	lateshift: Shift
}

pattern findNightShift() {
	nightshift: Shift
}

pattern findStaff() {
	staff: Staff
}

pattern findTreatment(){
	treatment: Treatment{
		
	}
	
	staff: Staff{
		-treatment->treatment
	}
		}
pattern findCoveredPatient(){
	patient:Patient{
		-coveredBy->shiftPlan
	}
	shiftPlan:Shiftplan{
		
	}
}


