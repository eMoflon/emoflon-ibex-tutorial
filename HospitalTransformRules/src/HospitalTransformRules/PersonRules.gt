
import "platform:/resource/HospitalExample/model/HospitalExample.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"



rule patient(name: EString, patientId: EInt, level: Carelevel) {
	hospital: Hospital {
		-reception -> reception // A path from Hospital to reception is required before creating a new patient in the reception
	}

	reception: Reception {
		++ -waits -> patient // Creates the Branch waits from Reception towards the patient node
	}

	++patient: Patient {
		.name:=param::name
		.patientID:=param::patientId
		.level:=param::level
	} // Adds a patient in the reception
}


abstract rule staff(name: EString, staffID: EInt) { //creates the Abstract rule Staff which hands over the StaffID to the rules Nurse and Doctor
	hospital: Hospital {
		++ -staff -> staff // Adds the Branch staff from hospital to Staff
		-department -> department
	}
	
	department : Department

	++staff: Staff { // Creates the node staff of the type Staff and the param staffID
		.staffID:=param::staffID
		.name:=param::name
	}
}

rule doctor(capacity: EInt)
refines staff { // adds the rule doctor which refines/inherits from the rule Staff
	++staff: Doctor {
		.patientCapacity:=param::capacity
	}
	department : Department {
		++ -staff -> staff
	}
} when departmentWithoutDoctor
condition departmentWithoutDoctor = forbid doctorInDepartment 

rule assignNurseToRoom() refines staff { // assigns a Nurse to a room she is responsible for
	++ staff: Nurse {
		++ -responsible -> room // Adds a responsiblity branch to room
	}

	room: Room
	
	department : Department {
		-rooms->room
		++ -staff-> staff
	}
}
when forbidNurse //Applies only if a room has no nurse who is responsible for the room and the nurse has no other room assigned to her 

condition forbidNurse = forbid findNurseInRoom //First condition to forbid finding a Nurse in a Room when she already has a room

pattern findNurseInRoom() { //This pattern checks whether a nurse is already responsible for this room
	somenurse: Nurse {
		-responsible -> room
	}

	room: Room {
		
	}
}


rule assignPatientToRoom() {
	patient: Patient {
		
	}

	room: Room {
		++ -lies -> patient
	}
	#room.capacity>count(findPatientInRoom)

	doctor: Doctor {
		++-caresfor->patient
	}

	#doctor.patientCapacity>count(findOccupiedDoc)
	
	hospital: Hospital {
		-reception -> reception
		-department -> department
	}

	department: Department {
		-rooms -> room
	}

	reception: Reception {
		-- -waits -> patient
	}
}
when patientWithDoc

condition patientWithDoc = forbid findPatientWithDoc


rule releasePatient(patientID:EInt){
	-- patient:Patient{
		
	}
	room:Room{
		-- -lies->patient
	}
	doctor:Doctor{
		-- -caresfor->patient
	}
	
}

	pattern findPatientWithDoc() {
		somedoctor: Doctor {
			-caresfor->patient
		}
	
		patient: Patient {
		
		}
	}
	
	condition docWithPatient = enforce findPatientWithDoc
	
	pattern findDocWithPatient() {
		somedoctor : Doctor
	} when docWithPatient

pattern findPatientInRoom(){
	somepatient:Patient{
		
	}
	room:Room{
		-lies->somepatient
	}
}



pattern findPatient() {
	patient: Patient
}

pattern findPatientInReception(){
	reception: Reception {
		-waits->patient
	}
	patient: Patient
}



pattern findOccupiedDoc() {
	doctor: Doctor

	somepatient: Patient {
		-doctor -> doctor
	}
}

pattern findNurse() {
	nurse: Nurse
}

pattern findDoctor() {
	doctor: Doctor
}

pattern findDepartment() {
	department: Department
}



pattern doctorInDepartment() {
	someDoctor : Doctor
	department : Department {
		-staff->someDoctor
	}
}

pattern findDepartmentWithoutDoctor() {
	department : Department
}when departmentWithoutDoctor

